from ..generic.stat import xy_stat
from ..generic.plot_functions import xy_plot
from ..utils.utils import get_mod_path

import numpy as np
import h5py
import os




def plot_cosmic_dust(fig, ax, redshifts, avg, lo, hi, std, **plot_args):

    l,d,d=ax.errorbar(redshifts, avg, yerr=std, **plot_args)
    print(redshifts, lo, hi)
    s=ax.fill_between(redshifts, lo, hi, alpha=0.3, color=l.get_color())

    ax.set_xlabel('redshift')
    ax.set_ylabel('Dust density, $\mathrm{M_\odot.cMpc^-3.h^3}$')

    ax.grid()

    ax.set_xlim(np.max(redshifts[avg>0]), np.min(redshifts[avg>0]))

    if np.diff(ax.get_xlim())>0:
        ax.invert_xaxis()

    ax.set_yscale('log')

    


    return((l,s), "CoDa III")


def plot_dustier_cosmic_dust(fig, ax, **plot_args):

    p = get_mod_path()

    with h5py.File(os.path.join(p, '../constraints/dustier_cosmic_dust.hdf5'), 'r') as src:

        redshifts=src['redshifts'][()]
        densities=src['densities'][()]
        densities_lo=src['densities_lo_16'][()]
        densities_hi=src['densities_hi_84'][()]
        densities_std=src['densities_std'][()]

    l=ax.errorbar(redshifts, densities, yerr=densities_std, **plot_args)

    s = ax.fill_between(redshifts, densities_lo, densities_hi+densities, alpha=0.3, color=l[0].get_color())

    return((l,s), 'DUSTiER')


def plot_constraints(fig,ax):

    h=0.6777
    H0 = h * 100.

    popping17_cosmic_fid=np.asarray([0.07636811928271459, 370190.87956134893,
0.2012829506935685, 361300.4479328222,
0.32619156181420594, 350572.264278843,
0.4510887690694467, 336543.6749900699,
0.5759870130397235, 323390.7552369267,
0.7008873304400725, 311356.7931266336,
0.8257969782757457, 302405.50149516587,
0.9507107729715636, 294856.14581953565,
1.0756100536568765, 283608.10677658336,
1.213473900174662, 268652.65290333796,
1.3253287879697249, 243455.3551436585,
1.4502441031809288, 237716.4221642995,
1.568844387780171, 231050.26013482903,
1.7000166084469814, 214616.23801273978,
1.8248813319644253, 199845.67225431127,
1.9497671353542692, 189807.53649286093,
2.0746544938166673, 180536.73752247184,
2.1995263015535245, 169232.35527479005,
2.324356122331421, 152510.06966704645,
2.4492232648506156, 142336.41707775672,
2.574086260509666, 132325.7563822123,
2.698956513173969, 123859.33983600346,
2.823810869541052, 114218.9188429011,
2.948651403040988, 103972.09967584876,
3.0734812238188844, 93698.34828124594,
3.198295493871239, 83217.12871987667,
3.3231450122348205, 76392.60697287909,
3.4480048977487634, 70812.9718202918,
3.5728378286717684, 64002.18596734548,
3.6976282542782934, 55585.68495578136,
3.822506800662885, 52435.528079327196,
3.947330401150565, 46979.353427503906,
4.072186139804363, 43378.983486469246,
4.196920582798941, 35747.35729858221,
4.321746256716693, 32090.01407012613,
4.446582297784806, 29088.32807461531,
4.571403824842413, 26010.911520615886,
4.6962606002112475, 24040.870877712678,
4.815331676306794, 20106.36456270156,
4.934408558006543, 16907.59069819958,
5.059287104391134, 15949.402215956788,
5.184114851738959, 14345.475690853345,
5.308918754640953, 12617.486821793838,
5.433730951263236, 11184.306868470323,
5.558556625180988, 10040.030701459871,
5.672011838964266, 8910.198637986454,
5.748787910213522, 6739.019582847329,
5.821656980975102, 5864.209130804444,
5.907967136230382, 7857.5680764477565,
5.984191387104048, 7580.426443598542]).reshape((-1,2)).T

    popping17_cosmic_highcond=np.asarray([0.13524765861283194, 444586.972680049,
0.3169625517772905, 437510.994396996,
0.4870085754348301, 414622.1498378439,
0.6687177666665902, 405846.8225419311,
0.8506691542777287, 386873.92914882867,
1.0323802461537213, 379361.5499249706,
1.2202787495692635, 360798.9214190021,
1.3843567503358392, 336053.17268660874,
1.5712432964577223, 320261.4861793825,
1.7360478863624338, 293548.4031735619,
1.8971372598332477, 269886.9731290288,
2.0504451242944106, 262765.8888762274,
2.208401489387922, 236427.44452642452,
2.3620174618552503, 210064.23648597562,
2.532280430475933, 189333.5454600634,
2.720408368802433, 173276.2253908992,
2.8906680791758594, 155699.5056824957,
3.0440624908297655, 135928.36950572638,
3.1608547031294885, 123398.53052179764,
3.255417455643544, 113480.90424037784,
3.4011094386639114, 106048.21164848379,
3.5424250525779764, 94613.87310915258,
3.662573938353111, 83999.60710813318,
3.7907548108957165, 78462.8840277567,
3.915302126826284, 69913.77334569096,
4.0522009693680685, 66760.89223673982,
4.168986434380764, 55108.51006825589,
4.3264057724463, 46706.06762314944,
4.447007350949594, 43336.82419718974,
4.551058119473742, 40715.54298695128,
4.736448858584418, 36131.75990262898,
4.86114822605361, 28811.52560507645,
5.011135393519481, 26134.048202808,
5.169484038006611, 23221.409089306322,
5.285092081069153, 20403.472069130617,
5.442762942246839, 18100.672609631245,
5.563340287536164, 16417.51780364521,
5.652740890313959, 15729.93028739674,
5.713593816715232, 13068.03953894829,
5.805630327947272, 10343.67025119698,
5.922298773750272, 13032.720152919546]).reshape((-1,2)).T


    pozzi20_cosmic_fid=np.asarray([0.1,0.25,1.48,7.58,0.08,4.9,1.6,1.32,0.17,555,
0.25,0.4,1.48,7.80,0.03,5.0,0.7,2.24,0.29,801,
0.4,0.8,1.48,8.05,0.02,4.4,0.7,3.62,0.46,1512,
0.8,1.2,1.48,8.22,0.07,3.3,0.3,3.85,0.48,1215,
1.2,1.8,1.48,8.58,0.05,0.8,0.1,2.22,0.29,804,
1.8,2.5,1.48,8.91,0.09,0.2,0.2,1.38,0.17,435]).reshape((-1,10)) #low z, high z, alpha, mdust, mdust pm, DMF e-3 /Mpc^3/dex, cosmic dust density e5 Msun/Mcp, Nobj

    pozzi_z_bins=(pozzi20_cosmic_fid[:,1]-pozzi20_cosmic_fid[:,0])*0.5+pozzi20_cosmic_fid[:,0]  
    pozzi_aexp_bins=1./(1+pozzi_z_bins)  

    lpop1=ax.plot(popping17_cosmic_fid[0],popping17_cosmic_fid[1]*(100/H0)**3,linestyle='--',label='Popping+17, fiducial',
        linewidth=1.25,color='magenta')
    lpop2=ax.plot(popping17_cosmic_highcond[0],popping17_cosmic_highcond[1]*(100/H0)**3,linestyle='--',label='Popping+17, high-cond',
        linewidth=1.25,color='gold')
 
    
    lpozz=ax.errorbar(pozzi_z_bins,pozzi20_cosmic_fid[:,7]*1e5/h**3,
            xerr=[pozzi_z_bins-pozzi20_cosmic_fid[:,0],pozzi20_cosmic_fid[:,1]-pozzi_z_bins],
            yerr=pozzi20_cosmic_fid[:,8]*1e5/h**3,
            label='Pozzi+20',linewidth=1.25,elinewidth=1.,capsize=4,color='navy')  

    return([lpop1, lpop2, lpozz], ['Popping+17, fiducial', 'Popping+17, high-cond', 'Pozzi+20'])